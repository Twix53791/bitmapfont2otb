#!/usr/bin/env python3
import prettytable
import sys
try:
    import fontforge
except ImportError:
    print("FontForge (fontforge.org) must be separately installed, not available as pip package!", file=sys.stderr)
    sys.exit(1)
import glob
import os
from bdflib import reader as bdfreader

def rename_glyphs(font):
    for g in font.glyphs():
        oldenc = g.unicode
        if oldenc == -1: return
        oldname = g.glyphname
        newname = fontforge.nameFromUnicode(oldenc, "Adobe Glyph List")
        newenc = fontforge.unicodeFromName(oldname)
        if newenc == -1: return
        if oldname != newname and g.altuni is None:
            print(("Changing glyph name {} to {} (because encoding is U+{:04X}"+
                   " && !altuni)").format(oldname, newname, g.unicode), file=sys.stderr)
        if g.altuni is None:
            g.glyphname = newname
            g.unicode = newenc

assert len(sys.argv) == 3, "Must provide a filename: PCF, BDF, or SFD containing a bitmap font, and an output OTB filename"
(_, infile, outfile) = sys.argv

cm = fontforge.open(infile)
out_bdf = outfile.replace(".otb", ".bdf")
rename_glyphs(cm)
cm.generate(out_bdf)
bdff = glob.glob(out_bdf.split(".")[0]+"*-*.bdf")
os.rename(bdff[0], out_bdf)
f = fontforge.font()
f.ascent = cm.ascent
f.descent = cm.descent
f.importBitmaps(out_bdf, True)
with open(out_bdf, "rb") as bdff:
    bdf = bdfreader.read_bdf(bdff)

t = prettytable.PrettyTable(['BDF Property', 'Value'])
for key, val in bdf.properties.items():
    k = key.decode('latin1') if isinstance(key, bytes) else repr(key)
    v = val.decode('latin1') if isinstance(val, bytes) else repr(val)
    t.add_row([k, v])
print(t, file=sys.stderr)

block_size = f.em / bdf[b"POINT_SIZE"]
quad_width = bdf.properties[b"QUAD_WIDTH"]

def is_monospace(bdf):
    return bdf.properties[b"SPACING"] in [b"C", b"M"]

def pos_to_contour(x, y):
    pos_x, pos_y = x*block_size, y*block_size
    c = fontforge.contour()
    c.moveTo(pos_x, pos_y)
    c.lineTo(pos_x+block_size, pos_y)
    c.lineTo(pos_x+block_size, pos_y+block_size)
    c.lineTo(pos_x, pos_y+block_size)
    c.closed = True
    return c

for i, g in enumerate(bdf.glyphs):
    gn = g.name.decode("utf-8")
    x, y, w, h = g.get_bounding_box()
    orig_x = x
    l = fontforge.layer()
    pixels = list()
    for row in g.iter_pixels():
        pixels.append([p for p in row])
    for row in reversed(pixels):
        for p in row:
            if p:
                c = pos_to_contour(x, y)
                l += c
            x += 1
        x = orig_x
        y += 1
    ffg = f.createChar(-1,gn)
    ffg.foreground = l
    if is_monospace(bdf):
        ffg.width = int(block_size*quad_width)
    else:
        ffg.width = int(block_size*(g.advance))

f.selection.all()
f.encoding = "UnicodeFull"
f.encoding = "compacted"
f.importBitmaps(out_bdf)
try:
    os.unlink("output.sfd")
except: pass
f.save("output.sfd")
out_otf = out_bdf.replace(".bdf", ".otf")
rename_glyphs(f)
f.generate(out_otf, flags=("opentype",), bitmap_type="otf")
os.rename(out_otf, outfile)
